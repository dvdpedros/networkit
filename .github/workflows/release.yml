name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_tag:
        description: 'Create and push tag automatically'
        required: true
        default: true
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          VERSION_TYPE="${{ inputs.version_type }}"
          
          # Parse current version (assumes semantic versioning)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version in pyproject.toml
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          echo "Updated pyproject.toml with version $NEW_VERSION"

      - name: Commit version bump
        if: ${{ inputs.create_tag }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.new_version.outputs.new_version }}"

      - name: Create and push tag
        if: ${{ inputs.create_tag }}
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git tag "v$NEW_VERSION"
          git push origin master
          git push origin "v$NEW_VERSION"
          echo "Created and pushed tag v$NEW_VERSION"

      - name: Output information
        run: |
          echo "Version bumped from ${{ steps.current_version.outputs.current_version }} to ${{ steps.new_version.outputs.new_version }}"
          if [ "${{ inputs.create_tag }}" = "true" ]; then
            echo "Tag v${{ steps.new_version.outputs.new_version }} has been created and pushed"
            echo "The build_wheels workflow should now be triggered automatically"
          else
            echo "Version updated in pyproject.toml but no tag created"
            echo "You can manually create and push a tag when ready"
          fi
